% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/application_visualization.R
\name{get_ligand_signaling_path}
\alias{get_ligand_signaling_path}
\title{Get ligand-target signaling paths between ligand(s) and target gene(s) of interest}
\usage{
get_ligand_signaling_path(ligand_tf_matrix, ligands_all, targets_all, top_n_regulators = 4, weighted_networks, ligands_position = "cols")
}
\arguments{
\item{ligand_tf_matrix}{A matrix of ligand-regulator probability scores}

\item{ligands_all}{A character vector of one or more ligands of interest}

\item{targets_all}{A character vector of one or more target genes of interest}

\item{top_n_regulators}{The number of top regulators that should be included in the ligand-target signaling network. Top regulators are regulators that score both high for being upstream of the target gene(s) and high for being downstream of the ligand. Default: 4.}

\item{weighted_networks}{A list of two elements: lr_sig: a data frame/ tibble containg weighted ligand-receptor and signaling interactions (from, to, weight); and gr: a data frame/tibble containng weighted gene regulatory interactions (from, to, weight)}

\item{ligands_position}{Indicate whether the ligands in the ligand-target matrix are in the rows ("rows") or columns ("cols"). Default: "cols".}

\item{minmax_scaling}{Indicate whether the weights of both dataframes should be min-max scaled between 0.75 and 1. Default: FALSE.}
}
\value{
A list containing 2 elements (sig and gr): the integrated weighted ligand-signaling and gene regulatory networks data frame / tibble format with columns: from, to, weight
}
\description{
\code{get_ligand_signaling_path} Extract possible signaling paths between a ligand and target gene of interest. The most highly weighted path(s) will be extracted.
}
\examples{
\dontrun{
weighted_networks = construct_weighted_networks(lr_network, sig_network, gr_network,source_weights_df)
ligands = list("TNF","BMP2",c("IL4","IL13"))
ligand_tf_matrix = construct_ligand_tf_matrix(weighted_networks, lr_network, ligands, ltf_cutoff = 0.99, algorithm = "PPR", damping_factor = 0.5,ligands_as_cols = TRUE)
all_ligands = c("BMP2")
all_targets = c("HEY1")
top_n_regulators = 2
ligand_target_signaling_list = get_ligand_signaling_path(ligand_tf_matrix,all_ligands,all_targets,top_n_regulators,weighted_networks)
}
}
