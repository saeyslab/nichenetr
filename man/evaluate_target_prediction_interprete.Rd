% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evaluate_model_target_prediction.R
\name{evaluate_target_prediction_interprete}
\alias{evaluate_target_prediction_interprete}
\title{Evaluation of target gene prediction.}
\usage{
evaluate_target_prediction_interprete(setting,ligand_target_matrix, ligands_position = "cols")
}
\arguments{
\item{setting}{A list containing the following elements: .$name: name of the setting; .$from: name(s) of the ligand(s) active in the setting of interest; .$response: named logical vector indicating whether a target is a TRUE target of the possibly active ligand(s) or a FALSE.}

\item{ligand_target_matrix}{A matrix of ligand-target probabilty scores (or discrete target assignments).}

\item{ligands_position}{Indicate whether the ligands in the ligand-target matrix are in the rows ("rows") or columns ("cols"). Default: "cols"}
}
\value{
A list with the elements $performances and $prediction_response_df. $performance is a data.frame with classification evaluation metrics if response is categorical, or regression model fit metrics if response is continuous. $prediction_response_df shows for each gene, the model prediction and the response value of the gene (e.g. whether the gene the gene is a target or not according to the observed response, or the absolute value of the log fold change of a gene).
}
\description{
\code{evaluate_target_prediction_interprete} Evaluate how well the model (i.e. the inferred ligand-target probability scores) is able to predict the observed response to a ligand (e.g. the set of DE genes after treatment of cells by a ligand; or the log fold change values). It shows several classification evaluation metrics for the prediction when response is categorical, or several regression model fit metrics when the response is continuous.
}
\examples{
\dontrun{
weighted_networks = construct_weighted_networks(lr_network, sig_network, gr_network, source_weights_df)
setting = lapply(expression_settings_validation[1],convert_expression_settings_evaluation)
ligands = extract_ligands_from_settings(setting)
ligand_target_matrix = construct_ligand_target_matrix(weighted_networks, lr_network, ligands)
perf1 = lapply(setting,evaluate_target_prediction_interprete,ligand_target_matrix)
setting = lapply(expression_settings_validation[1],convert_expression_settings_evaluation_regression)
perf2 = lapply(setting,evaluate_target_prediction_interprete,ligand_target_matrix)
}
}
